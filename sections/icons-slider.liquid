<div class="page-width" x-data="{
  skip:1,
  prev(){
    this.to((current, offset) => current - (offset * this.skip));
  },
  next(){
    this.to((current, offset) => current + (offset * this.skip));
  },
  to(strategy){
    let slider = this.$refs.icon_slider;
    console.log(slider)
    let current = slider.scrollLeft;
    let offset = slider.firstElementChild.getBoundingClientRect().width;
    slider.scrollTo({ left: strategy(current, offset), behavior:'smooth' });
  },
  focusableWhenVisible:{
    'x-intersect:enter'(){
      this.$el.removeAttribute('tabindex');
    },
    'x-intesect:leave'(){
      this.$el.setAttribute('tabindex', '-1');
    },
  }
}">
    <div class="py-6 relative">
        <ul class="flex overflow-x-scroll snap-x snap-mandatory no-scrollbar" x-ref="icon_slider">
            {% for block in section.blocks %}
               {% assign icon = block.settings %}
               <li class="flex-shrink-0 w-[335px] flex items-center space-x-3 justify-center md:justify-start snap-start">
                 <img src="{{ icon.icon_image | img_url: '50x' }}" 
                 alt="{{ icon.icon_text }}" 
                 loading="lazy" 
                 width="30" 
                 heading="30"
                 >   
                 <span class="text-sm tracking-[1.5px]">
                     {{ icon.icon_text }}
                 </span>
               </li> 
            {% endfor %}
        </ul>
        <button class="absolute block sm:hidden top-1/2 left-0 -translate-y-1/2" @click="prev">
            {% render 'icon-arrow-right', class: 'rotate-180' %}
            <span class="sr-only">Anterior</span>
        </button>
        <button class="absolute block sm:hidden top-1/2 right-0 -translate-y-1/2" @click="next">
            {% render 'icon-arrow-right', class: '' %}
            <div class="sr-only">Siguiente</div>
        </button>
    </div>
</div>

{% schema %}
{
    "name": "icons-slider",
    "max_blocks": 4,
    "blocks": [
        {
            "name": "Slide",
            "type": "slide",
            "settings": [
                {
                    "type":"image_picker",
                    "id": "icon_image",
                    "label":"Icono" 
                },
                {
                    "type":"text",
                    "id": "icon_text",
                    "label": "El texto del icono"
                }
            ]
        }
    ]
}
{% endschema %}